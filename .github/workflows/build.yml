name: Build

on:
  push:
    paths:
      - '**.c'
      - '**.cpp'
      - '**.h'
      - '**.hpp'
      - '**.cmake'
      - '**/CMakeLists.txt'
      - '.github/workflows/build.yml'
  pull_request:
    paths:
      - '**.c'
      - '**.cpp'
      - '**.h'
      - '**.hpp'
      - '**.cmake'
      - '**/CMakeLists.txt'
      - '.github/workflows/build.yml'

jobs:
  Build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # see: https://github.com/actions/virtual-environments
          - {
            name: "Windows X86 / MSVC",
            os: windows-2019,
            config: Release,
            cc: "cl",
            cxx: "cl",
            cxx_standard: 20,
            cmake_extra_args: -G "Visual Studio 16 2019" -A Win32,
            sudocmd: "",
            artifact_name: "Windows x86",
            cores: 2,
          }
          - {
            name: "Windows / MSVC",
            os: windows-2019,
            config: Release,
            cxx_standard: 20,
            cmake_extra_args: -G "Visual Studio 16 2019" -A x64 -DCMAKE_CXX_FLAGS="/O2",
            sudocmd: "",
            artifact_name: "Windows x64",
            cores: 2,
          }
          - {
            name: "Ubuntu / GCC 10",
            os: ubuntu-20.04,
            config: Release,
            cxx_standard: 20,
            cmake_extra_args: "-DCMAKE_C_COMPILER=/usr/bin/gcc-10 -DCMAKE_CXX_COMPILER=/usr/bin/g++-10  -DCMAKE_CXX_FLAGS=\"-O2\"",
            sudocmd: "sudo",
            artifact_name: "Linux",
            cores: 2,
          }
          - {
            name: "MacOSX / Clang 11",
            os: macos-11.0,
            config: Release,
            cc: "clang",
            cxx: "clang++",
            cxx_standard: 20,
            cmake_extra_args: "-DCMAKE_CXX_FLAGS=\"-O2\"",
            sudocmd: "sudo",
            artifact_name: "MacOSX",
            cores: 4,
          }
    steps:
      - uses: actions/checkout@v2
      - name: Install
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-20.04" ]; then
            sudo apt-get install -y g++-10 g++-10-multilib
            echo "::set-env name=CC::gcc-10"
            echo "::set-env name=CXX::g++-10"
          fi
          if [ "${{ matrix.os }}" = "macos-11.0" ]; then
            ls -ls /Applications/
            sudo xcode-select -switch /Applications/Xcode_${{ matrix.version }}.app
            echo "::set-env name=CC::clang"
            echo "::set-env name=CXX::clang++"
          fi
      - name: Create Build Directory
        run: mkdir build
      - name: Configure Build Script
        working-directory: ./build
        run: |
          cmake .. ${{ matrix.config.cmake_extra_args }} -DCMAKE_BUILD_TYPE=${{ matrix.config.config }}
      - name: Build All Targets
        working-directory: ./build
        run: cmake --build . --parallel ${{ matrix.config.cores }} --config ${{ matrix.config.config }}
      - name: Test
        working-directory: ./build
        run: ctest --parallel ${{ matrix.config.cores }} -C ${{ matrix.config.config }}
      - name: Install
        working-directory: ./build
        run: ${{ matrix.config.sudocmd }} cmake --install .